<?php
// Ensure Swoole is loaded
if (!extension_loaded('swoole')) {
    exit("Please install Swoole extension.\n");
}

$dnsRecords = [
    'namingo.org' => [
        'A' => ['1.2.3.4'],
        'AAAA' => ['2001:0db8:85a3:0000:0000:8a2e:0370:7334'],
        'TXT' => ['"v=spf1 include:_spf.example.com ~all"'],
        'MX' => [
            ['preference' => 10, 'exchange' => 'mail.namingo.org'],
        ],
        'NS' => ['ns1.namingo.org', 'ns2.namingo.org'],
        'SOA' => [
            'mname' => 'ns1.namingo.org',
            'rname' => 'admin.namingo.org',
            'serial' => 2021010101,
            'refresh' => 7200,
            'retry' => 3600,
            'expire' => 1209600,
            'minimum' => 86400,
        ],
    ],
    // Add more domains as needed
];

// Create a UDP server
$server = new Swoole\Server("0.0.0.0", 53, SWOOLE_PROCESS, SWOOLE_SOCK_UDP);

// Handle packets received
$server->on('Packet', function ($server, $data, $clientInfo) use ($dnsRecords) {

    // Define the DNS query header structure
    $queryHeader = unpack('nid/nflags/nqdcount/nancount/nnscount/narcount', $data);

    // Skip the DNS header to get to the domain name
    $offset = 12; // Size of the DNS header (12 bytes)
    $domainName = '';

    // Loop to decode the labels in the domain name
    while ($data[$offset] !== "\x00") {
        $labelLength = ord($data[$offset]);
        $offset++;

        // If the two high bits are set, it's a pointer
        if (($labelLength & 0xC0) == 0xC0) {
            $pointer = unpack('npointer', substr($data, $offset - 1, 2));
            $pointer = $pointer['pointer'] & 0x3FFF; // Clear the two high bits
            $subDomain = extractDomainName($data, $pointer); // Recursively extract the domain name
            $domainName .= $subDomain;
            break; // Pointer marks the end of the domain name
        }

        $domainName .= substr($data, $offset, $labelLength) . '.';
        $offset += $labelLength;
    }

    // Remove the trailing dot if present
    $domainName = rtrim($domainName, '.');

    // Extract the DNS record type from the query
    $offset++; // Move to the byte immediately following the null-terminated domain name
    $queryType = unpack('n', substr($data, $offset, 2));
    $recordType = $queryType[1];

    // Map the record type to a human-readable form (you can extend this mapping as needed)
    $recordTypes = [
        1 => 'A',
        2 => 'NS',
        5 => 'CNAME',
        6 => 'SOA',
        15 => 'MX',
        28 => 'AAAA',
    ];

    $recordTypeString = isset($recordTypes[$recordType]) ? $recordTypes[$recordType] : 'Unknown';

    echo "New $recordType ($recordTypeString) request for $domainName\n";
    
    $transactionId = substr($data, 0, 2);
    $flags = 0x8180; // Standard query response, no error
    $qdCount = substr($data, 4, 2); // Echo back the original question count
    $anCount = pack('n', 1); // One answer
    $nsCount = pack('n', 0); // No authority records
    $arCount = pack('n', 0); // No additional records
    
    // Check if domain exists in records
    if (!isset($dnsRecords[$domainName])) {
        // Domain not found, set NXDOMAIN flag
        $flags = 0x8183; // 0x8180 with RCODE set to 3 for NXDOMAIN
        $qdCount = substr($data, 4, 2); // Echo back the original question count
        $anCount = pack('n', 0); // Corrected to 0 answers for NXDOMAIN
        $nsCount = pack('n', 0); // No authority records
        $arCount = pack('n', 0); // No additional records
        $response = $transactionId . pack('n', $flags) . $qdCount . $anCount . $nsCount . $arCount;
        // It's crucial to echo back the question section even in NXDOMAIN responses
        $question = substr($data, 12, $offset + 4 - 12); // Extracting the question section correctly
        $response .= $question; // Append the question section to the response
        $server->sendto($clientInfo['address'], $clientInfo['port'], $response);
        return; // Stop processing since domain is not found
    }

    // Determine end of question section to properly echo it back
    $offset = 12;
    while ($data[$offset] !== "\x00") {
        $offset++;
    }
    $endOfQuestion = $offset + 5; // Including QTYPE and QCLASS
    $question = substr($data, 12, $endOfQuestion - 12);

    // Answer section
    $namePointer = pack('n', 0xc00c); // Pointer to the domain name in the question section
    $class = pack('n', 1); // Class IN
    $ttl = pack('N', 3600); // TTL for simplicity
    $rdlength = pack('n', 0); // Initialize rdlength to 0
    $rdata = ''; // Initialize rdata as empty
    
    // Determine the response based on the record type requested
    switch ($recordType) {
        case 1: // Type A
            $type = pack('n', 1); // Correctly set the type for A records
            if (isset($dnsRecords[$domainName]['A'])) {
                $ip = $dnsRecords[$domainName]['A'][0];
                $rdata = inet_pton($ip);
                $rdlength = pack('n', 4);
            }
            break;
        case 2: // NS record type
            $type = pack('n', 2);
            if (isset($dnsRecords[$domainName]['NS'])) {
                // Assuming multiple NS records can be returned, loop through them
                // For simplicity, this example handles just one
                $ns = $dnsRecords[$domainName]['NS'][0];
                $rdata = domainNameToDNSFormat($ns);
                $rdlength = pack('n', strlen($rdata));
            }
            break;
        case 28: // Type AAAA
            $type = pack('n', 28); // Correctly set the type for AAAA records
            if (isset($dnsRecords[$domainName]['AAAA'])) {
                $ip = $dnsRecords[$domainName]['AAAA'][0];
                $rdata = inet_pton($ip);
                $rdlength = pack('n', 16);
            }
            break;
        case 16: // Type TXT
            $type = pack('n', 16); // Correctly set the type for TXT records
            if (isset($dnsRecords[$domainName]['TXT'])) {
                $text = $dnsRecords[$domainName]['TXT'][0];
                // TXT records require length byte for each character
                $rdata = chr(strlen($text)) . $text;
                $rdlength = pack('n', strlen($rdata));
            }
            break;
        case 15: // MX record type
            $type = pack('n', 15);
            if (isset($dnsRecords[$domainName]['MX'])) {
                $preference = $dnsRecords[$domainName]['MX'][0]['preference'];
                $exchange = $dnsRecords[$domainName]['MX'][0]['exchange'];
                $rdata = pack('n', $preference) . domainNameToDNSFormat($exchange);
                $rdlength = pack('n', strlen($rdata));
            }
            break;
        case 6: // SOA record type
            $type = pack('n', 6);
            if (isset($dnsRecords[$domainName]['SOA'])) {
                $mname = domainNameToDNSFormat($dnsRecords[$domainName]['SOA']['mname']);
                $rname = domainNameToDNSFormat($dnsRecords[$domainName]['SOA']['rname']);
                $serial = pack('N', $dnsRecords[$domainName]['SOA']['serial']);
                $refresh = pack('N', $dnsRecords[$domainName]['SOA']['refresh']);
                $retry = pack('N', $dnsRecords[$domainName]['SOA']['retry']);
                $expire = pack('N', $dnsRecords[$domainName]['SOA']['expire']);
                $minimum = pack('N', $dnsRecords[$domainName]['SOA']['minimum']);
                $rdata = $mname . $rname . $serial . $refresh . $retry . $expire . $minimum;
                $rdlength = pack('n', strlen($rdata));
            }
            break;
        default:
            // Handle unsupported record types or set flags for NXDOMAIN, etc.
            return; // For simplicity, just return; handle as needed
    }
    
    // Construct the response
    $response = $transactionId . pack('n', $flags) . $qdCount . $anCount . $nsCount . $arCount . $question . $namePointer . $type . $class . $ttl . $rdlength . $rdata;

    // Send the response
    $server->sendto($clientInfo['address'], $clientInfo['port'], $response);
    
});

// Start the server
$server->start();

function domainNameToDNSFormat($domainName) {
    $labels = explode('.', $domainName);
    $dnsFormat = '';
    foreach ($labels as $label) {
        $dnsFormat .= chr(strlen($label)) . $label;
    }
    $dnsFormat .= "\x00"; // End of the domain name
    return $dnsFormat;
}